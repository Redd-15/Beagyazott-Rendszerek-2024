
Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000286c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002a00  08002a00  00003a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a18  08002a18  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a18  08002a18  00003a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a20  08002a20  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a20  08002a20  00003a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a24  08002a24  00003a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002a28  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08002a34  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002a34  000040bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c09d  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001988  00000000  00000000  000100d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00011a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000090b  00000000  00000000  000125e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000154d1  00000000  00000000  00012ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca2e  00000000  00000000  000283c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000899ea  00000000  00000000  00034df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be7dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030b4  00000000  00000000  000be820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c18d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080029e8 	.word	0x080029e8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080029e8 	.word	0x080029e8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 faae 	bl	8000a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f80e 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f922 	bl	8000718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f8f6 	bl	80006c4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004d8:	f000 f872 	bl	80005c0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //TIMER megoldás//
  HAL_TIM_Base_Start_IT(&htim1);
 80004dc:	4802      	ldr	r0, [pc, #8]	@ (80004e8 <main+0x24>)
 80004de:	f001 fa77 	bl	80019d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e2:	bf00      	nop
 80004e4:	e7fd      	b.n	80004e2 <main+0x1e>
 80004e6:	bf00      	nop
 80004e8:	20000028 	.word	0x20000028

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b094      	sub	sp, #80	@ 0x50
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0320 	add.w	r3, r7, #32
 80004f6:	2230      	movs	r2, #48	@ 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 fa48 	bl	8002990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	2300      	movs	r3, #0
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	4b28      	ldr	r3, [pc, #160]	@ (80005b8 <SystemClock_Config+0xcc>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000518:	4a27      	ldr	r2, [pc, #156]	@ (80005b8 <SystemClock_Config+0xcc>)
 800051a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800051e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000520:	4b25      	ldr	r3, [pc, #148]	@ (80005b8 <SystemClock_Config+0xcc>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	4b22      	ldr	r3, [pc, #136]	@ (80005bc <SystemClock_Config+0xd0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000538:	4a20      	ldr	r2, [pc, #128]	@ (80005bc <SystemClock_Config+0xd0>)
 800053a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b1e      	ldr	r3, [pc, #120]	@ (80005bc <SystemClock_Config+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800054c:	2302      	movs	r3, #2
 800054e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000554:	2310      	movs	r3, #16
 8000556:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000558:	2302      	movs	r3, #2
 800055a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055c:	2300      	movs	r3, #0
 800055e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000560:	2308      	movs	r3, #8
 8000562:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000564:	2354      	movs	r3, #84	@ 0x54
 8000566:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000568:	2302      	movs	r3, #2
 800056a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800056c:	2307      	movs	r3, #7
 800056e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0320 	add.w	r3, r7, #32
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fd93 	bl	80010a0 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000580:	f000 f938 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000588:	2302      	movs	r3, #2
 800058a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000590:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000594:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2102      	movs	r1, #2
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fff5 	bl	8001590 <HAL_RCC_ClockConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005ac:	f000 f922 	bl	80007f4 <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3750      	adds	r7, #80	@ 0x50
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40007000 	.word	0x40007000

080005c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b092      	sub	sp, #72	@ 0x48
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
 80005e0:	615a      	str	r2, [r3, #20]
 80005e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2220      	movs	r2, #32
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 f9d0 	bl	8002990 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005f0:	4b32      	ldr	r3, [pc, #200]	@ (80006bc <MX_TIM1_Init+0xfc>)
 80005f2:	4a33      	ldr	r2, [pc, #204]	@ (80006c0 <MX_TIM1_Init+0x100>)
 80005f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 33600-1;
 80005f6:	4b31      	ldr	r3, [pc, #196]	@ (80006bc <MX_TIM1_Init+0xfc>)
 80005f8:	f248 323f 	movw	r2, #33599	@ 0x833f
 80005fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005fe:	4b2f      	ldr	r3, [pc, #188]	@ (80006bc <MX_TIM1_Init+0xfc>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8000604:	4b2d      	ldr	r3, [pc, #180]	@ (80006bc <MX_TIM1_Init+0xfc>)
 8000606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800060a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800060c:	4b2b      	ldr	r3, [pc, #172]	@ (80006bc <MX_TIM1_Init+0xfc>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000612:	4b2a      	ldr	r3, [pc, #168]	@ (80006bc <MX_TIM1_Init+0xfc>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000618:	4b28      	ldr	r3, [pc, #160]	@ (80006bc <MX_TIM1_Init+0xfc>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800061e:	4827      	ldr	r0, [pc, #156]	@ (80006bc <MX_TIM1_Init+0xfc>)
 8000620:	f001 fa38 	bl	8001a94 <HAL_TIM_OC_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800062a:	f000 f8e3 	bl	80007f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800062e:	2300      	movs	r3, #0
 8000630:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000632:	2300      	movs	r3, #0
 8000634:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000636:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800063a:	4619      	mov	r1, r3
 800063c:	481f      	ldr	r0, [pc, #124]	@ (80006bc <MX_TIM1_Init+0xfc>)
 800063e:	f001 fe0f 	bl	8002260 <HAL_TIMEx_MasterConfigSynchronization>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000648:	f000 f8d4 	bl	80007f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800064c:	2300      	movs	r3, #0
 800064e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000654:	2300      	movs	r3, #0
 8000656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000658:	2300      	movs	r3, #0
 800065a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800065c:	2300      	movs	r3, #0
 800065e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000660:	2300      	movs	r3, #0
 8000662:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000664:	2300      	movs	r3, #0
 8000666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800066c:	2200      	movs	r2, #0
 800066e:	4619      	mov	r1, r3
 8000670:	4812      	ldr	r0, [pc, #72]	@ (80006bc <MX_TIM1_Init+0xfc>)
 8000672:	f001 fb4f 	bl	8001d14 <HAL_TIM_OC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800067c:	f000 f8ba 	bl	80007f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000694:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000698:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4619      	mov	r1, r3
 80006a2:	4806      	ldr	r0, [pc, #24]	@ (80006bc <MX_TIM1_Init+0xfc>)
 80006a4:	f001 fe4a 	bl	800233c <HAL_TIMEx_ConfigBreakDeadTime>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80006ae:	f000 f8a1 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	3748      	adds	r7, #72	@ 0x48
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000028 	.word	0x20000028
 80006c0:	40010000 	.word	0x40010000

080006c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c8:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	@ (8000714 <MX_USART2_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	@ (8000710 <MX_USART2_UART_Init+0x4c>)
 80006fc:	f001 fe84 	bl	8002408 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000706:	f000 f875 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000070 	.word	0x20000070
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	@ 0x28
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	4b2d      	ldr	r3, [pc, #180]	@ (80007e8 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a2c      	ldr	r2, [pc, #176]	@ (80007e8 <MX_GPIO_Init+0xd0>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b2a      	ldr	r3, [pc, #168]	@ (80007e8 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	4b26      	ldr	r3, [pc, #152]	@ (80007e8 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a25      	ldr	r2, [pc, #148]	@ (80007e8 <MX_GPIO_Init+0xd0>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b23      	ldr	r3, [pc, #140]	@ (80007e8 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a1e      	ldr	r2, [pc, #120]	@ (80007e8 <MX_GPIO_Init+0xd0>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a17      	ldr	r2, [pc, #92]	@ (80007e8 <MX_GPIO_Init+0xd0>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2120      	movs	r1, #32
 80007a2:	4812      	ldr	r0, [pc, #72]	@ (80007ec <MX_GPIO_Init+0xd4>)
 80007a4:	f000 fc48 	bl	8001038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <MX_GPIO_Init+0xd8>)
 80007c0:	f000 fab6 	bl	8000d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007c4:	2320      	movs	r3, #32
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4804      	ldr	r0, [pc, #16]	@ (80007ec <MX_GPIO_Init+0xd4>)
 80007dc:	f000 faa8 	bl	8000d30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	@ 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020000 	.word	0x40020000
 80007f0:	40020800 	.word	0x40020800

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <Error_Handler+0x8>

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b10      	ldr	r3, [pc, #64]	@ (800084c <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800080e:	4a0f      	ldr	r2, [pc, #60]	@ (800084c <HAL_MspInit+0x4c>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000814:	6453      	str	r3, [r2, #68]	@ 0x44
 8000816:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082a:	4a08      	ldr	r2, [pc, #32]	@ (800084c <HAL_MspInit+0x4c>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	@ 0x40
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800083e:	2007      	movs	r0, #7
 8000840:	f000 fa34 	bl	8000cac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800

08000850 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a0e      	ldr	r2, [pc, #56]	@ (8000898 <HAL_TIM_OC_MspInit+0x48>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d115      	bne.n	800088e <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b0d      	ldr	r3, [pc, #52]	@ (800089c <HAL_TIM_OC_MspInit+0x4c>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086a:	4a0c      	ldr	r2, [pc, #48]	@ (800089c <HAL_TIM_OC_MspInit+0x4c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6453      	str	r3, [r2, #68]	@ 0x44
 8000872:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <HAL_TIM_OC_MspInit+0x4c>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	2019      	movs	r0, #25
 8000884:	f000 fa1d 	bl	8000cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000888:	2019      	movs	r0, #25
 800088a:	f000 fa36 	bl	8000cfa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40010000 	.word	0x40010000
 800089c:	40023800 	.word	0x40023800

080008a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a19      	ldr	r2, [pc, #100]	@ (8000924 <HAL_UART_MspInit+0x84>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d12b      	bne.n	800091a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	4b18      	ldr	r3, [pc, #96]	@ (8000928 <HAL_UART_MspInit+0x88>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	4a17      	ldr	r2, [pc, #92]	@ (8000928 <HAL_UART_MspInit+0x88>)
 80008cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d2:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <HAL_UART_MspInit+0x88>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <HAL_UART_MspInit+0x88>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a10      	ldr	r2, [pc, #64]	@ (8000928 <HAL_UART_MspInit+0x88>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <HAL_UART_MspInit+0x88>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008fa:	230c      	movs	r3, #12
 80008fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800090a:	2307      	movs	r3, #7
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	@ (800092c <HAL_UART_MspInit+0x8c>)
 8000916:	f000 fa0b 	bl	8000d30 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	@ 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40004400 	.word	0x40004400
 8000928:	40023800 	.word	0x40023800
 800092c:	40020000 	.word	0x40020000

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <NMI_Handler+0x4>

08000938 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <MemManage_Handler+0x4>

08000948 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <UsageFault_Handler+0x4>

08000958 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000986:	f000 f8a1 	bl	8000acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000994:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000996:	f001 f8cc 	bl	8001b32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800099a:	2120      	movs	r1, #32
 800099c:	4803      	ldr	r0, [pc, #12]	@ (80009ac <TIM1_UP_TIM10_IRQHandler+0x1c>)
 800099e:	f000 fb64 	bl	800106a <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000028 	.word	0x20000028
 80009ac:	40020000 	.word	0x40020000

080009b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <SystemInit+0x20>)
 80009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ba:	4a05      	ldr	r2, [pc, #20]	@ (80009d0 <SystemInit+0x20>)
 80009bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <Reset_Handler>:
 80009d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a0c <LoopFillZerobss+0xe>
 80009d8:	f7ff ffea 	bl	80009b0 <SystemInit>
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <LoopFillZerobss+0x12>)
 80009de:	490d      	ldr	r1, [pc, #52]	@ (8000a14 <LoopFillZerobss+0x16>)
 80009e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <LoopFillZerobss+0x1a>)
 80009e2:	2300      	movs	r3, #0
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:
 80009e6:	58d4      	ldr	r4, [r2, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:
 80009ec:	18c4      	adds	r4, r0, r3
 80009ee:	428c      	cmp	r4, r1
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <LoopFillZerobss+0x1e>)
 80009f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a20 <LoopFillZerobss+0x22>)
 80009f6:	2300      	movs	r3, #0
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:
 80009fe:	42a2      	cmp	r2, r4
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>
 8000a02:	f001 ffcd 	bl	80029a0 <__libc_init_array>
 8000a06:	f7ff fd5d 	bl	80004c4 <main>
 8000a0a:	4770      	bx	lr
 8000a0c:	20018000 	.word	0x20018000
 8000a10:	20000000 	.word	0x20000000
 8000a14:	2000000c 	.word	0x2000000c
 8000a18:	08002a28 	.word	0x08002a28
 8000a1c:	2000000c 	.word	0x2000000c
 8000a20:	200000bc 	.word	0x200000bc

08000a24 <ADC_IRQHandler>:
 8000a24:	e7fe      	b.n	8000a24 <ADC_IRQHandler>
	...

08000a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0d      	ldr	r2, [pc, #52]	@ (8000a68 <HAL_Init+0x40>)
 8000a32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a38:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <HAL_Init+0x40>)
 8000a3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a44:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <HAL_Init+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a07      	ldr	r2, [pc, #28]	@ (8000a68 <HAL_Init+0x40>)
 8000a4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a50:	2003      	movs	r0, #3
 8000a52:	f000 f92b 	bl	8000cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f000 f808 	bl	8000a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a5c:	f7ff fed0 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023c00 	.word	0x40023c00

08000a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <HAL_InitTick+0x54>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <HAL_InitTick+0x58>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f943 	bl	8000d16 <HAL_SYSTICK_Config>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00e      	b.n	8000ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	d80a      	bhi.n	8000ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f000 f90b 	bl	8000cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aac:	4a06      	ldr	r2, [pc, #24]	@ (8000ac8 <HAL_InitTick+0x5c>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e000      	b.n	8000ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000004 	.word	0x20000004

08000acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_IncTick+0x20>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_IncTick+0x24>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <HAL_IncTick+0x24>)
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000008 	.word	0x20000008
 8000af0:	200000b8 	.word	0x200000b8

08000af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return uwTick;
 8000af8:	4b03      	ldr	r3, [pc, #12]	@ (8000b08 <HAL_GetTick+0x14>)
 8000afa:	681b      	ldr	r3, [r3, #0]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	200000b8 	.word	0x200000b8

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	@ (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db0b      	blt.n	8000b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	4907      	ldr	r1, [pc, #28]	@ (8000ba8 <__NVIC_EnableIRQ+0x38>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	fa00 f202 	lsl.w	r2, r0, r2
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db0a      	blt.n	8000bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	490c      	ldr	r1, [pc, #48]	@ (8000bf8 <__NVIC_SetPriority+0x4c>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd4:	e00a      	b.n	8000bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4908      	ldr	r1, [pc, #32]	@ (8000bfc <__NVIC_SetPriority+0x50>)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	3b04      	subs	r3, #4
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	440b      	add	r3, r1
 8000bea:	761a      	strb	r2, [r3, #24]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	@ 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f1c3 0307 	rsb	r3, r3, #7
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf28      	it	cs
 8000c1e:	2304      	movcs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d902      	bls.n	8000c30 <NVIC_EncodePriority+0x30>
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	e000      	b.n	8000c32 <NVIC_EncodePriority+0x32>
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	43d9      	mvns	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	4313      	orrs	r3, r2
         );
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3724      	adds	r7, #36	@ 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c78:	d301      	bcc.n	8000c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00f      	b.n	8000c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <SysTick_Config+0x40>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c86:	210f      	movs	r1, #15
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f7ff ff8e 	bl	8000bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <SysTick_Config+0x40>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c96:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <SysTick_Config+0x40>)
 8000c98:	2207      	movs	r2, #7
 8000c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	e000e010 	.word	0xe000e010

08000cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff29 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd4:	f7ff ff3e 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	6978      	ldr	r0, [r7, #20]
 8000ce0:	f7ff ff8e 	bl	8000c00 <NVIC_EncodePriority>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff5d 	bl	8000bac <__NVIC_SetPriority>
}
 8000cf2:	bf00      	nop
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff31 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ffa2 	bl	8000c68 <SysTick_Config>
 8000d24:	4603      	mov	r3, r0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	@ 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	e159      	b.n	8001000 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f040 8148 	bne.w	8000ffa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d005      	beq.n	8000d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d130      	bne.n	8000de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db8:	2201      	movs	r2, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	091b      	lsrs	r3, r3, #4
 8000dce:	f003 0201 	and.w	r2, r3, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d017      	beq.n	8000e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d123      	bne.n	8000e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	08da      	lsrs	r2, r3, #3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3208      	adds	r2, #8
 8000e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	08da      	lsrs	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3208      	adds	r2, #8
 8000e6e:	69b9      	ldr	r1, [r7, #24]
 8000e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0203 	and.w	r2, r3, #3
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 80a2 	beq.w	8000ffa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b57      	ldr	r3, [pc, #348]	@ (8001018 <HAL_GPIO_Init+0x2e8>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	4a56      	ldr	r2, [pc, #344]	@ (8001018 <HAL_GPIO_Init+0x2e8>)
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec6:	4b54      	ldr	r3, [pc, #336]	@ (8001018 <HAL_GPIO_Init+0x2e8>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ed2:	4a52      	ldr	r2, [pc, #328]	@ (800101c <HAL_GPIO_Init+0x2ec>)
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	3302      	adds	r3, #2
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	220f      	movs	r2, #15
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a49      	ldr	r2, [pc, #292]	@ (8001020 <HAL_GPIO_Init+0x2f0>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d019      	beq.n	8000f32 <HAL_GPIO_Init+0x202>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a48      	ldr	r2, [pc, #288]	@ (8001024 <HAL_GPIO_Init+0x2f4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <HAL_GPIO_Init+0x1fe>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a47      	ldr	r2, [pc, #284]	@ (8001028 <HAL_GPIO_Init+0x2f8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d00d      	beq.n	8000f2a <HAL_GPIO_Init+0x1fa>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a46      	ldr	r2, [pc, #280]	@ (800102c <HAL_GPIO_Init+0x2fc>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d007      	beq.n	8000f26 <HAL_GPIO_Init+0x1f6>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a45      	ldr	r2, [pc, #276]	@ (8001030 <HAL_GPIO_Init+0x300>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d101      	bne.n	8000f22 <HAL_GPIO_Init+0x1f2>
 8000f1e:	2304      	movs	r3, #4
 8000f20:	e008      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f22:	2307      	movs	r3, #7
 8000f24:	e006      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f26:	2303      	movs	r3, #3
 8000f28:	e004      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e002      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f32:	2300      	movs	r3, #0
 8000f34:	69fa      	ldr	r2, [r7, #28]
 8000f36:	f002 0203 	and.w	r2, r2, #3
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	4093      	lsls	r3, r2
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f44:	4935      	ldr	r1, [pc, #212]	@ (800101c <HAL_GPIO_Init+0x2ec>)
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f52:	4b38      	ldr	r3, [pc, #224]	@ (8001034 <HAL_GPIO_Init+0x304>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f76:	4a2f      	ldr	r2, [pc, #188]	@ (8001034 <HAL_GPIO_Init+0x304>)
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001034 <HAL_GPIO_Init+0x304>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa0:	4a24      	ldr	r2, [pc, #144]	@ (8001034 <HAL_GPIO_Init+0x304>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fa6:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <HAL_GPIO_Init+0x304>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fca:	4a1a      	ldr	r2, [pc, #104]	@ (8001034 <HAL_GPIO_Init+0x304>)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <HAL_GPIO_Init+0x304>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ff4:	4a0f      	ldr	r2, [pc, #60]	@ (8001034 <HAL_GPIO_Init+0x304>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	2b0f      	cmp	r3, #15
 8001004:	f67f aea2 	bls.w	8000d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3724      	adds	r7, #36	@ 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40013800 	.word	0x40013800
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400
 8001028:	40020800 	.word	0x40020800
 800102c:	40020c00 	.word	0x40020c00
 8001030:	40021000 	.word	0x40021000
 8001034:	40013c00 	.word	0x40013c00

08001038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001054:	e003      	b.n	800105e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	041a      	lsls	r2, r3, #16
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	619a      	str	r2, [r3, #24]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800106a:	b480      	push	{r7}
 800106c:	b085      	sub	sp, #20
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	460b      	mov	r3, r1
 8001074:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800107c:	887a      	ldrh	r2, [r7, #2]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4013      	ands	r3, r2
 8001082:	041a      	lsls	r2, r3, #16
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	43d9      	mvns	r1, r3
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	400b      	ands	r3, r1
 800108c:	431a      	orrs	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	619a      	str	r2, [r3, #24]
}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e267      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d075      	beq.n	80011aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010be:	4b88      	ldr	r3, [pc, #544]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d00c      	beq.n	80010e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ca:	4b85      	ldr	r3, [pc, #532]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d112      	bne.n	80010fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010d6:	4b82      	ldr	r3, [pc, #520]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010e2:	d10b      	bne.n	80010fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e4:	4b7e      	ldr	r3, [pc, #504]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d05b      	beq.n	80011a8 <HAL_RCC_OscConfig+0x108>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d157      	bne.n	80011a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e242      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001104:	d106      	bne.n	8001114 <HAL_RCC_OscConfig+0x74>
 8001106:	4b76      	ldr	r3, [pc, #472]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a75      	ldr	r2, [pc, #468]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 800110c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e01d      	b.n	8001150 <HAL_RCC_OscConfig+0xb0>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800111c:	d10c      	bne.n	8001138 <HAL_RCC_OscConfig+0x98>
 800111e:	4b70      	ldr	r3, [pc, #448]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a6f      	ldr	r2, [pc, #444]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001124:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b6d      	ldr	r3, [pc, #436]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a6c      	ldr	r2, [pc, #432]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e00b      	b.n	8001150 <HAL_RCC_OscConfig+0xb0>
 8001138:	4b69      	ldr	r3, [pc, #420]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a68      	ldr	r2, [pc, #416]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 800113e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b66      	ldr	r3, [pc, #408]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a65      	ldr	r2, [pc, #404]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 800114a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800114e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d013      	beq.n	8001180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff fccc 	bl	8000af4 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fcc8 	bl	8000af4 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b64      	cmp	r3, #100	@ 0x64
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e207      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	4b5b      	ldr	r3, [pc, #364]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f0      	beq.n	8001160 <HAL_RCC_OscConfig+0xc0>
 800117e:	e014      	b.n	80011aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001180:	f7ff fcb8 	bl	8000af4 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001188:	f7ff fcb4 	bl	8000af4 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b64      	cmp	r3, #100	@ 0x64
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e1f3      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119a:	4b51      	ldr	r3, [pc, #324]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0xe8>
 80011a6:	e000      	b.n	80011aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d063      	beq.n	800127e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011b6:	4b4a      	ldr	r3, [pc, #296]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00b      	beq.n	80011da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c2:	4b47      	ldr	r3, [pc, #284]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d11c      	bne.n	8001208 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ce:	4b44      	ldr	r3, [pc, #272]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d116      	bne.n	8001208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011da:	4b41      	ldr	r3, [pc, #260]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d005      	beq.n	80011f2 <HAL_RCC_OscConfig+0x152>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d001      	beq.n	80011f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e1c7      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f2:	4b3b      	ldr	r3, [pc, #236]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4937      	ldr	r1, [pc, #220]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001202:	4313      	orrs	r3, r2
 8001204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001206:	e03a      	b.n	800127e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d020      	beq.n	8001252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001210:	4b34      	ldr	r3, [pc, #208]	@ (80012e4 <HAL_RCC_OscConfig+0x244>)
 8001212:	2201      	movs	r2, #1
 8001214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001216:	f7ff fc6d 	bl	8000af4 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800121e:	f7ff fc69 	bl	8000af4 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e1a8      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001230:	4b2b      	ldr	r3, [pc, #172]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f0      	beq.n	800121e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123c:	4b28      	ldr	r3, [pc, #160]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4925      	ldr	r1, [pc, #148]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 800124c:	4313      	orrs	r3, r2
 800124e:	600b      	str	r3, [r1, #0]
 8001250:	e015      	b.n	800127e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001252:	4b24      	ldr	r3, [pc, #144]	@ (80012e4 <HAL_RCC_OscConfig+0x244>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001258:	f7ff fc4c 	bl	8000af4 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001260:	f7ff fc48 	bl	8000af4 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e187      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001272:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f0      	bne.n	8001260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	2b00      	cmp	r3, #0
 8001288:	d036      	beq.n	80012f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d016      	beq.n	80012c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001292:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <HAL_RCC_OscConfig+0x248>)
 8001294:	2201      	movs	r2, #1
 8001296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001298:	f7ff fc2c 	bl	8000af4 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a0:	f7ff fc28 	bl	8000af4 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e167      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b2:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <HAL_RCC_OscConfig+0x240>)
 80012b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0x200>
 80012be:	e01b      	b.n	80012f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c0:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <HAL_RCC_OscConfig+0x248>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c6:	f7ff fc15 	bl	8000af4 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012cc:	e00e      	b.n	80012ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ce:	f7ff fc11 	bl	8000af4 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d907      	bls.n	80012ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e150      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
 80012e0:	40023800 	.word	0x40023800
 80012e4:	42470000 	.word	0x42470000
 80012e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ec:	4b88      	ldr	r3, [pc, #544]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 80012ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1ea      	bne.n	80012ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 8097 	beq.w	8001434 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800130a:	4b81      	ldr	r3, [pc, #516]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10f      	bne.n	8001336 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	4b7d      	ldr	r3, [pc, #500]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	4a7c      	ldr	r2, [pc, #496]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001324:	6413      	str	r3, [r2, #64]	@ 0x40
 8001326:	4b7a      	ldr	r3, [pc, #488]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001332:	2301      	movs	r3, #1
 8001334:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001336:	4b77      	ldr	r3, [pc, #476]	@ (8001514 <HAL_RCC_OscConfig+0x474>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800133e:	2b00      	cmp	r3, #0
 8001340:	d118      	bne.n	8001374 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001342:	4b74      	ldr	r3, [pc, #464]	@ (8001514 <HAL_RCC_OscConfig+0x474>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a73      	ldr	r2, [pc, #460]	@ (8001514 <HAL_RCC_OscConfig+0x474>)
 8001348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800134c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800134e:	f7ff fbd1 	bl	8000af4 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001356:	f7ff fbcd 	bl	8000af4 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e10c      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001368:	4b6a      	ldr	r3, [pc, #424]	@ (8001514 <HAL_RCC_OscConfig+0x474>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d106      	bne.n	800138a <HAL_RCC_OscConfig+0x2ea>
 800137c:	4b64      	ldr	r3, [pc, #400]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001380:	4a63      	ldr	r2, [pc, #396]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6713      	str	r3, [r2, #112]	@ 0x70
 8001388:	e01c      	b.n	80013c4 <HAL_RCC_OscConfig+0x324>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b05      	cmp	r3, #5
 8001390:	d10c      	bne.n	80013ac <HAL_RCC_OscConfig+0x30c>
 8001392:	4b5f      	ldr	r3, [pc, #380]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 8001394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001396:	4a5e      	ldr	r2, [pc, #376]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6713      	str	r3, [r2, #112]	@ 0x70
 800139e:	4b5c      	ldr	r3, [pc, #368]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 80013a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a2:	4a5b      	ldr	r2, [pc, #364]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80013aa:	e00b      	b.n	80013c4 <HAL_RCC_OscConfig+0x324>
 80013ac:	4b58      	ldr	r3, [pc, #352]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 80013ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b0:	4a57      	ldr	r2, [pc, #348]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80013b8:	4b55      	ldr	r3, [pc, #340]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 80013ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013bc:	4a54      	ldr	r2, [pc, #336]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 80013be:	f023 0304 	bic.w	r3, r3, #4
 80013c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d015      	beq.n	80013f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013cc:	f7ff fb92 	bl	8000af4 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d2:	e00a      	b.n	80013ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d4:	f7ff fb8e 	bl	8000af4 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e0cb      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ea:	4b49      	ldr	r3, [pc, #292]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 80013ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0ee      	beq.n	80013d4 <HAL_RCC_OscConfig+0x334>
 80013f6:	e014      	b.n	8001422 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f8:	f7ff fb7c 	bl	8000af4 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fe:	e00a      	b.n	8001416 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001400:	f7ff fb78 	bl	8000af4 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800140e:	4293      	cmp	r3, r2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e0b5      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001416:	4b3e      	ldr	r3, [pc, #248]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 8001418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1ee      	bne.n	8001400 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001422:	7dfb      	ldrb	r3, [r7, #23]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d105      	bne.n	8001434 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001428:	4b39      	ldr	r3, [pc, #228]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142c:	4a38      	ldr	r2, [pc, #224]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 800142e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001432:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80a1 	beq.w	8001580 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800143e:	4b34      	ldr	r3, [pc, #208]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b08      	cmp	r3, #8
 8001448:	d05c      	beq.n	8001504 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d141      	bne.n	80014d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001452:	4b31      	ldr	r3, [pc, #196]	@ (8001518 <HAL_RCC_OscConfig+0x478>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fb4c 	bl	8000af4 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001460:	f7ff fb48 	bl	8000af4 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e087      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001472:	4b27      	ldr	r3, [pc, #156]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69da      	ldr	r2, [r3, #28]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148c:	019b      	lsls	r3, r3, #6
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	3b01      	subs	r3, #1
 8001498:	041b      	lsls	r3, r3, #16
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a0:	061b      	lsls	r3, r3, #24
 80014a2:	491b      	ldr	r1, [pc, #108]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <HAL_RCC_OscConfig+0x478>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff fb21 	bl	8000af4 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff fb1d 	bl	8000af4 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e05c      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c8:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x416>
 80014d4:	e054      	b.n	8001580 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <HAL_RCC_OscConfig+0x478>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fb0a 	bl	8000af4 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff fb06 	bl	8000af4 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e045      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f6:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <HAL_RCC_OscConfig+0x470>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x444>
 8001502:	e03d      	b.n	8001580 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d107      	bne.n	800151c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e038      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
 8001510:	40023800 	.word	0x40023800
 8001514:	40007000 	.word	0x40007000
 8001518:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800151c:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <HAL_RCC_OscConfig+0x4ec>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d028      	beq.n	800157c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001534:	429a      	cmp	r2, r3
 8001536:	d121      	bne.n	800157c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001542:	429a      	cmp	r2, r3
 8001544:	d11a      	bne.n	800157c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800154c:	4013      	ands	r3, r2
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001552:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001554:	4293      	cmp	r3, r2
 8001556:	d111      	bne.n	800157c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001562:	085b      	lsrs	r3, r3, #1
 8001564:	3b01      	subs	r3, #1
 8001566:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001568:	429a      	cmp	r2, r3
 800156a:	d107      	bne.n	800157c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001576:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001578:	429a      	cmp	r2, r3
 800157a:	d001      	beq.n	8001580 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800

08001590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0cc      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015a4:	4b68      	ldr	r3, [pc, #416]	@ (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d90c      	bls.n	80015cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b2:	4b65      	ldr	r3, [pc, #404]	@ (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ba:	4b63      	ldr	r3, [pc, #396]	@ (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0b8      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d020      	beq.n	800161a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e4:	4b59      	ldr	r3, [pc, #356]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4a58      	ldr	r2, [pc, #352]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015fc:	4b53      	ldr	r3, [pc, #332]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	4a52      	ldr	r2, [pc, #328]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001608:	4b50      	ldr	r3, [pc, #320]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	494d      	ldr	r1, [pc, #308]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	4313      	orrs	r3, r2
 8001618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d044      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d107      	bne.n	800163e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	4b47      	ldr	r3, [pc, #284]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d119      	bne.n	800166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e07f      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d003      	beq.n	800164e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164a:	2b03      	cmp	r3, #3
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164e:	4b3f      	ldr	r3, [pc, #252]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d109      	bne.n	800166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e06f      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165e:	4b3b      	ldr	r3, [pc, #236]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e067      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800166e:	4b37      	ldr	r3, [pc, #220]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f023 0203 	bic.w	r2, r3, #3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	4934      	ldr	r1, [pc, #208]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	4313      	orrs	r3, r2
 800167e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001680:	f7ff fa38 	bl	8000af4 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001686:	e00a      	b.n	800169e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001688:	f7ff fa34 	bl	8000af4 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e04f      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169e:	4b2b      	ldr	r3, [pc, #172]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 020c 	and.w	r2, r3, #12
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d1eb      	bne.n	8001688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016b0:	4b25      	ldr	r3, [pc, #148]	@ (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d20c      	bcs.n	80016d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016be:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c6:	4b20      	ldr	r3, [pc, #128]	@ (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e032      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d008      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e4:	4b19      	ldr	r3, [pc, #100]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4916      	ldr	r1, [pc, #88]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d009      	beq.n	8001716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	490e      	ldr	r1, [pc, #56]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001716:	f000 f821 	bl	800175c <HAL_RCC_GetSysClockFreq>
 800171a:	4602      	mov	r2, r0
 800171c:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	490a      	ldr	r1, [pc, #40]	@ (8001750 <HAL_RCC_ClockConfig+0x1c0>)
 8001728:	5ccb      	ldrb	r3, [r1, r3]
 800172a:	fa22 f303 	lsr.w	r3, r2, r3
 800172e:	4a09      	ldr	r2, [pc, #36]	@ (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 8001730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001732:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <HAL_RCC_ClockConfig+0x1c8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff f998 	bl	8000a6c <HAL_InitTick>

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023c00 	.word	0x40023c00
 800174c:	40023800 	.word	0x40023800
 8001750:	08002a00 	.word	0x08002a00
 8001754:	20000000 	.word	0x20000000
 8001758:	20000004 	.word	0x20000004

0800175c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800175c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001760:	b094      	sub	sp, #80	@ 0x50
 8001762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001774:	4b79      	ldr	r3, [pc, #484]	@ (800195c <HAL_RCC_GetSysClockFreq+0x200>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b08      	cmp	r3, #8
 800177e:	d00d      	beq.n	800179c <HAL_RCC_GetSysClockFreq+0x40>
 8001780:	2b08      	cmp	r3, #8
 8001782:	f200 80e1 	bhi.w	8001948 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <HAL_RCC_GetSysClockFreq+0x34>
 800178a:	2b04      	cmp	r3, #4
 800178c:	d003      	beq.n	8001796 <HAL_RCC_GetSysClockFreq+0x3a>
 800178e:	e0db      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001790:	4b73      	ldr	r3, [pc, #460]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x204>)
 8001792:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001794:	e0db      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001796:	4b73      	ldr	r3, [pc, #460]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x208>)
 8001798:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800179a:	e0d8      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800179c:	4b6f      	ldr	r3, [pc, #444]	@ (800195c <HAL_RCC_GetSysClockFreq+0x200>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017a6:	4b6d      	ldr	r3, [pc, #436]	@ (800195c <HAL_RCC_GetSysClockFreq+0x200>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d063      	beq.n	800187a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b2:	4b6a      	ldr	r3, [pc, #424]	@ (800195c <HAL_RCC_GetSysClockFreq+0x200>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	099b      	lsrs	r3, r3, #6
 80017b8:	2200      	movs	r2, #0
 80017ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80017c6:	2300      	movs	r3, #0
 80017c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017ce:	4622      	mov	r2, r4
 80017d0:	462b      	mov	r3, r5
 80017d2:	f04f 0000 	mov.w	r0, #0
 80017d6:	f04f 0100 	mov.w	r1, #0
 80017da:	0159      	lsls	r1, r3, #5
 80017dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e0:	0150      	lsls	r0, r2, #5
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4621      	mov	r1, r4
 80017e8:	1a51      	subs	r1, r2, r1
 80017ea:	6139      	str	r1, [r7, #16]
 80017ec:	4629      	mov	r1, r5
 80017ee:	eb63 0301 	sbc.w	r3, r3, r1
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001800:	4659      	mov	r1, fp
 8001802:	018b      	lsls	r3, r1, #6
 8001804:	4651      	mov	r1, sl
 8001806:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800180a:	4651      	mov	r1, sl
 800180c:	018a      	lsls	r2, r1, #6
 800180e:	4651      	mov	r1, sl
 8001810:	ebb2 0801 	subs.w	r8, r2, r1
 8001814:	4659      	mov	r1, fp
 8001816:	eb63 0901 	sbc.w	r9, r3, r1
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001826:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800182a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800182e:	4690      	mov	r8, r2
 8001830:	4699      	mov	r9, r3
 8001832:	4623      	mov	r3, r4
 8001834:	eb18 0303 	adds.w	r3, r8, r3
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	462b      	mov	r3, r5
 800183c:	eb49 0303 	adc.w	r3, r9, r3
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800184e:	4629      	mov	r1, r5
 8001850:	024b      	lsls	r3, r1, #9
 8001852:	4621      	mov	r1, r4
 8001854:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001858:	4621      	mov	r1, r4
 800185a:	024a      	lsls	r2, r1, #9
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001862:	2200      	movs	r2, #0
 8001864:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001866:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001868:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800186c:	f7fe fcb2 	bl	80001d4 <__aeabi_uldivmod>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4613      	mov	r3, r2
 8001876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001878:	e058      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187a:	4b38      	ldr	r3, [pc, #224]	@ (800195c <HAL_RCC_GetSysClockFreq+0x200>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	099b      	lsrs	r3, r3, #6
 8001880:	2200      	movs	r2, #0
 8001882:	4618      	mov	r0, r3
 8001884:	4611      	mov	r1, r2
 8001886:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800188a:	623b      	str	r3, [r7, #32]
 800188c:	2300      	movs	r3, #0
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001890:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001894:	4642      	mov	r2, r8
 8001896:	464b      	mov	r3, r9
 8001898:	f04f 0000 	mov.w	r0, #0
 800189c:	f04f 0100 	mov.w	r1, #0
 80018a0:	0159      	lsls	r1, r3, #5
 80018a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018a6:	0150      	lsls	r0, r2, #5
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4641      	mov	r1, r8
 80018ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80018b2:	4649      	mov	r1, r9
 80018b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018cc:	ebb2 040a 	subs.w	r4, r2, sl
 80018d0:	eb63 050b 	sbc.w	r5, r3, fp
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	00eb      	lsls	r3, r5, #3
 80018de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018e2:	00e2      	lsls	r2, r4, #3
 80018e4:	4614      	mov	r4, r2
 80018e6:	461d      	mov	r5, r3
 80018e8:	4643      	mov	r3, r8
 80018ea:	18e3      	adds	r3, r4, r3
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	464b      	mov	r3, r9
 80018f0:	eb45 0303 	adc.w	r3, r5, r3
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001902:	4629      	mov	r1, r5
 8001904:	028b      	lsls	r3, r1, #10
 8001906:	4621      	mov	r1, r4
 8001908:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800190c:	4621      	mov	r1, r4
 800190e:	028a      	lsls	r2, r1, #10
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001916:	2200      	movs	r2, #0
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	61fa      	str	r2, [r7, #28]
 800191c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001920:	f7fe fc58 	bl	80001d4 <__aeabi_uldivmod>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4613      	mov	r3, r2
 800192a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800192c:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <HAL_RCC_GetSysClockFreq+0x200>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	0c1b      	lsrs	r3, r3, #16
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	3301      	adds	r3, #1
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800193c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800193e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001940:	fbb2 f3f3 	udiv	r3, r2, r3
 8001944:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001946:	e002      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x204>)
 800194a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800194c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800194e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001950:	4618      	mov	r0, r3
 8001952:	3750      	adds	r7, #80	@ 0x50
 8001954:	46bd      	mov	sp, r7
 8001956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	00f42400 	.word	0x00f42400
 8001964:	007a1200 	.word	0x007a1200

08001968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800196c:	4b03      	ldr	r3, [pc, #12]	@ (800197c <HAL_RCC_GetHCLKFreq+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000000 	.word	0x20000000

08001980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001984:	f7ff fff0 	bl	8001968 <HAL_RCC_GetHCLKFreq>
 8001988:	4602      	mov	r2, r0
 800198a:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	0a9b      	lsrs	r3, r3, #10
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	4903      	ldr	r1, [pc, #12]	@ (80019a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001996:	5ccb      	ldrb	r3, [r1, r3]
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	08002a10 	.word	0x08002a10

080019a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019ac:	f7ff ffdc 	bl	8001968 <HAL_RCC_GetHCLKFreq>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	0b5b      	lsrs	r3, r3, #13
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	4903      	ldr	r1, [pc, #12]	@ (80019cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019be:	5ccb      	ldrb	r3, [r1, r3]
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	08002a10 	.word	0x08002a10

080019d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d001      	beq.n	80019e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e044      	b.n	8001a72 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1e      	ldr	r2, [pc, #120]	@ (8001a80 <HAL_TIM_Base_Start_IT+0xb0>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d018      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x6c>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a12:	d013      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x6c>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a1a      	ldr	r2, [pc, #104]	@ (8001a84 <HAL_TIM_Base_Start_IT+0xb4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00e      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x6c>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a19      	ldr	r2, [pc, #100]	@ (8001a88 <HAL_TIM_Base_Start_IT+0xb8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d009      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x6c>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a17      	ldr	r2, [pc, #92]	@ (8001a8c <HAL_TIM_Base_Start_IT+0xbc>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d004      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x6c>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a16      	ldr	r2, [pc, #88]	@ (8001a90 <HAL_TIM_Base_Start_IT+0xc0>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d111      	bne.n	8001a60 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b06      	cmp	r3, #6
 8001a4c:	d010      	beq.n	8001a70 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f042 0201 	orr.w	r2, r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a5e:	e007      	b.n	8001a70 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40010000 	.word	0x40010000
 8001a84:	40000400 	.word	0x40000400
 8001a88:	40000800 	.word	0x40000800
 8001a8c:	40000c00 	.word	0x40000c00
 8001a90:	40014000 	.word	0x40014000

08001a94 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e041      	b.n	8001b2a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d106      	bne.n	8001ac0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7fe fec8 	bl	8000850 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3304      	adds	r3, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	f000 f9ac 	bl	8001e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b084      	sub	sp, #16
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d020      	beq.n	8001b96 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d01b      	beq.n	8001b96 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f06f 0202 	mvn.w	r2, #2
 8001b66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f939 	bl	8001df4 <HAL_TIM_IC_CaptureCallback>
 8001b82:	e005      	b.n	8001b90 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f92b 	bl	8001de0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f93c 	bl	8001e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d020      	beq.n	8001be2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d01b      	beq.n	8001be2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f06f 0204 	mvn.w	r2, #4
 8001bb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f913 	bl	8001df4 <HAL_TIM_IC_CaptureCallback>
 8001bce:	e005      	b.n	8001bdc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f905 	bl	8001de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f916 	bl	8001e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d020      	beq.n	8001c2e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d01b      	beq.n	8001c2e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f06f 0208 	mvn.w	r2, #8
 8001bfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2204      	movs	r2, #4
 8001c04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f8ed 	bl	8001df4 <HAL_TIM_IC_CaptureCallback>
 8001c1a:	e005      	b.n	8001c28 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f8df 	bl	8001de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f8f0 	bl	8001e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d020      	beq.n	8001c7a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d01b      	beq.n	8001c7a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f06f 0210 	mvn.w	r2, #16
 8001c4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2208      	movs	r2, #8
 8001c50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f8c7 	bl	8001df4 <HAL_TIM_IC_CaptureCallback>
 8001c66:	e005      	b.n	8001c74 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f8b9 	bl	8001de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f8ca 	bl	8001e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00c      	beq.n	8001c9e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f06f 0201 	mvn.w	r2, #1
 8001c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f897 	bl	8001dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00c      	beq.n	8001cc2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 fb99 	bl	80023f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00c      	beq.n	8001ce6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d007      	beq.n	8001ce6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f89b 	bl	8001e1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f003 0320 	and.w	r3, r3, #32
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00c      	beq.n	8001d0a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d007      	beq.n	8001d0a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f06f 0220 	mvn.w	r2, #32
 8001d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 fb6b 	bl	80023e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_TIM_OC_ConfigChannel+0x1e>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e048      	b.n	8001dc4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b0c      	cmp	r3, #12
 8001d3e:	d839      	bhi.n	8001db4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8001d40:	a201      	add	r2, pc, #4	@ (adr r2, 8001d48 <HAL_TIM_OC_ConfigChannel+0x34>)
 8001d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d46:	bf00      	nop
 8001d48:	08001d7d 	.word	0x08001d7d
 8001d4c:	08001db5 	.word	0x08001db5
 8001d50:	08001db5 	.word	0x08001db5
 8001d54:	08001db5 	.word	0x08001db5
 8001d58:	08001d8b 	.word	0x08001d8b
 8001d5c:	08001db5 	.word	0x08001db5
 8001d60:	08001db5 	.word	0x08001db5
 8001d64:	08001db5 	.word	0x08001db5
 8001d68:	08001d99 	.word	0x08001d99
 8001d6c:	08001db5 	.word	0x08001db5
 8001d70:	08001db5 	.word	0x08001db5
 8001d74:	08001db5 	.word	0x08001db5
 8001d78:	08001da7 	.word	0x08001da7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 f8e0 	bl	8001f48 <TIM_OC1_SetConfig>
      break;
 8001d88:	e017      	b.n	8001dba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68b9      	ldr	r1, [r7, #8]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 f93f 	bl	8002014 <TIM_OC2_SetConfig>
      break;
 8001d96:	e010      	b.n	8001dba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 f9a4 	bl	80020ec <TIM_OC3_SetConfig>
      break;
 8001da4:	e009      	b.n	8001dba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 fa07 	bl	80021c0 <TIM_OC4_SetConfig>
      break;
 8001db2:	e002      	b.n	8001dba <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	75fb      	strb	r3, [r7, #23]
      break;
 8001db8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a3a      	ldr	r2, [pc, #232]	@ (8001f2c <TIM_Base_SetConfig+0xfc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00f      	beq.n	8001e68 <TIM_Base_SetConfig+0x38>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e4e:	d00b      	beq.n	8001e68 <TIM_Base_SetConfig+0x38>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a37      	ldr	r2, [pc, #220]	@ (8001f30 <TIM_Base_SetConfig+0x100>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d007      	beq.n	8001e68 <TIM_Base_SetConfig+0x38>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a36      	ldr	r2, [pc, #216]	@ (8001f34 <TIM_Base_SetConfig+0x104>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d003      	beq.n	8001e68 <TIM_Base_SetConfig+0x38>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a35      	ldr	r2, [pc, #212]	@ (8001f38 <TIM_Base_SetConfig+0x108>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d108      	bne.n	8001e7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001f2c <TIM_Base_SetConfig+0xfc>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01b      	beq.n	8001eba <TIM_Base_SetConfig+0x8a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e88:	d017      	beq.n	8001eba <TIM_Base_SetConfig+0x8a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a28      	ldr	r2, [pc, #160]	@ (8001f30 <TIM_Base_SetConfig+0x100>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <TIM_Base_SetConfig+0x8a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a27      	ldr	r2, [pc, #156]	@ (8001f34 <TIM_Base_SetConfig+0x104>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00f      	beq.n	8001eba <TIM_Base_SetConfig+0x8a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a26      	ldr	r2, [pc, #152]	@ (8001f38 <TIM_Base_SetConfig+0x108>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00b      	beq.n	8001eba <TIM_Base_SetConfig+0x8a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a25      	ldr	r2, [pc, #148]	@ (8001f3c <TIM_Base_SetConfig+0x10c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d007      	beq.n	8001eba <TIM_Base_SetConfig+0x8a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a24      	ldr	r2, [pc, #144]	@ (8001f40 <TIM_Base_SetConfig+0x110>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d003      	beq.n	8001eba <TIM_Base_SetConfig+0x8a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a23      	ldr	r2, [pc, #140]	@ (8001f44 <TIM_Base_SetConfig+0x114>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d108      	bne.n	8001ecc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8001f2c <TIM_Base_SetConfig+0xfc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d103      	bne.n	8001f00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d105      	bne.n	8001f1e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f023 0201 	bic.w	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	611a      	str	r2, [r3, #16]
  }
}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	40000400 	.word	0x40000400
 8001f34:	40000800 	.word	0x40000800
 8001f38:	40000c00 	.word	0x40000c00
 8001f3c:	40014000 	.word	0x40014000
 8001f40:	40014400 	.word	0x40014400
 8001f44:	40014800 	.word	0x40014800

08001f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f023 0201 	bic.w	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f023 0303 	bic.w	r3, r3, #3
 8001f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f023 0302 	bic.w	r3, r3, #2
 8001f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002010 <TIM_OC1_SetConfig+0xc8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d10c      	bne.n	8001fbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f023 0308 	bic.w	r3, r3, #8
 8001faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f023 0304 	bic.w	r3, r3, #4
 8001fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a13      	ldr	r2, [pc, #76]	@ (8002010 <TIM_OC1_SetConfig+0xc8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d111      	bne.n	8001fea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	621a      	str	r2, [r3, #32]
}
 8002004:	bf00      	nop
 8002006:	371c      	adds	r7, #28
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	40010000 	.word	0x40010000

08002014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	f023 0210 	bic.w	r2, r3, #16
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800204a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	021b      	lsls	r3, r3, #8
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4313      	orrs	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f023 0320 	bic.w	r3, r3, #32
 800205e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a1e      	ldr	r2, [pc, #120]	@ (80020e8 <TIM_OC2_SetConfig+0xd4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d10d      	bne.n	8002090 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800207a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800208e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a15      	ldr	r2, [pc, #84]	@ (80020e8 <TIM_OC2_SetConfig+0xd4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d113      	bne.n	80020c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800209e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80020a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	621a      	str	r2, [r3, #32]
}
 80020da:	bf00      	nop
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40010000 	.word	0x40010000

080020ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800211a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f023 0303 	bic.w	r3, r3, #3
 8002122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	4313      	orrs	r3, r2
 8002140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a1d      	ldr	r2, [pc, #116]	@ (80021bc <TIM_OC3_SetConfig+0xd0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d10d      	bne.n	8002166 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	4313      	orrs	r3, r2
 800215c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a14      	ldr	r2, [pc, #80]	@ (80021bc <TIM_OC3_SetConfig+0xd0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d113      	bne.n	8002196 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800217c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	621a      	str	r2, [r3, #32]
}
 80021b0:	bf00      	nop
 80021b2:	371c      	adds	r7, #28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40010000 	.word	0x40010000

080021c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800220a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	031b      	lsls	r3, r3, #12
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a10      	ldr	r2, [pc, #64]	@ (800225c <TIM_OC4_SetConfig+0x9c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d109      	bne.n	8002234 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	019b      	lsls	r3, r3, #6
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	4313      	orrs	r3, r2
 8002232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	621a      	str	r2, [r3, #32]
}
 800224e:	bf00      	nop
 8002250:	371c      	adds	r7, #28
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40010000 	.word	0x40010000

08002260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002274:	2302      	movs	r3, #2
 8002276:	e050      	b.n	800231a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800229e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002328 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d018      	beq.n	80022ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c4:	d013      	beq.n	80022ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a18      	ldr	r2, [pc, #96]	@ (800232c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d00e      	beq.n	80022ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a16      	ldr	r2, [pc, #88]	@ (8002330 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d009      	beq.n	80022ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a15      	ldr	r2, [pc, #84]	@ (8002334 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d004      	beq.n	80022ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a13      	ldr	r2, [pc, #76]	@ (8002338 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d10c      	bne.n	8002308 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40010000 	.word	0x40010000
 800232c:	40000400 	.word	0x40000400
 8002330:	40000800 	.word	0x40000800
 8002334:	40000c00 	.word	0x40000c00
 8002338:	40014000 	.word	0x40014000

0800233c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002354:	2302      	movs	r3, #2
 8002356:	e03d      	b.n	80023d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	4313      	orrs	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4313      	orrs	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	4313      	orrs	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e042      	b.n	80024a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe fa36 	bl	80008a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2224      	movs	r2, #36	@ 0x24
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800244a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f82b 	bl	80024a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002460:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695a      	ldr	r2, [r3, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002470:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002480:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024ac:	b0c0      	sub	sp, #256	@ 0x100
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80024c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c4:	68d9      	ldr	r1, [r3, #12]
 80024c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	ea40 0301 	orr.w	r3, r0, r1
 80024d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	431a      	orrs	r2, r3
 80024e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002500:	f021 010c 	bic.w	r1, r1, #12
 8002504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800250e:	430b      	orrs	r3, r1
 8002510:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800251e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002522:	6999      	ldr	r1, [r3, #24]
 8002524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	ea40 0301 	orr.w	r3, r0, r1
 800252e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4b8f      	ldr	r3, [pc, #572]	@ (8002774 <UART_SetConfig+0x2cc>)
 8002538:	429a      	cmp	r2, r3
 800253a:	d005      	beq.n	8002548 <UART_SetConfig+0xa0>
 800253c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4b8d      	ldr	r3, [pc, #564]	@ (8002778 <UART_SetConfig+0x2d0>)
 8002544:	429a      	cmp	r2, r3
 8002546:	d104      	bne.n	8002552 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002548:	f7ff fa2e 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 800254c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002550:	e003      	b.n	800255a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002552:	f7ff fa15 	bl	8001980 <HAL_RCC_GetPCLK1Freq>
 8002556:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800255a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002564:	f040 810c 	bne.w	8002780 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800256c:	2200      	movs	r2, #0
 800256e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002572:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002576:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800257a:	4622      	mov	r2, r4
 800257c:	462b      	mov	r3, r5
 800257e:	1891      	adds	r1, r2, r2
 8002580:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002582:	415b      	adcs	r3, r3
 8002584:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002586:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800258a:	4621      	mov	r1, r4
 800258c:	eb12 0801 	adds.w	r8, r2, r1
 8002590:	4629      	mov	r1, r5
 8002592:	eb43 0901 	adc.w	r9, r3, r1
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025aa:	4690      	mov	r8, r2
 80025ac:	4699      	mov	r9, r3
 80025ae:	4623      	mov	r3, r4
 80025b0:	eb18 0303 	adds.w	r3, r8, r3
 80025b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80025b8:	462b      	mov	r3, r5
 80025ba:	eb49 0303 	adc.w	r3, r9, r3
 80025be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80025c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80025ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80025d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80025d6:	460b      	mov	r3, r1
 80025d8:	18db      	adds	r3, r3, r3
 80025da:	653b      	str	r3, [r7, #80]	@ 0x50
 80025dc:	4613      	mov	r3, r2
 80025de:	eb42 0303 	adc.w	r3, r2, r3
 80025e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80025e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80025e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80025ec:	f7fd fdf2 	bl	80001d4 <__aeabi_uldivmod>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4b61      	ldr	r3, [pc, #388]	@ (800277c <UART_SetConfig+0x2d4>)
 80025f6:	fba3 2302 	umull	r2, r3, r3, r2
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	011c      	lsls	r4, r3, #4
 80025fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002602:	2200      	movs	r2, #0
 8002604:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002608:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800260c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002610:	4642      	mov	r2, r8
 8002612:	464b      	mov	r3, r9
 8002614:	1891      	adds	r1, r2, r2
 8002616:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002618:	415b      	adcs	r3, r3
 800261a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800261c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002620:	4641      	mov	r1, r8
 8002622:	eb12 0a01 	adds.w	sl, r2, r1
 8002626:	4649      	mov	r1, r9
 8002628:	eb43 0b01 	adc.w	fp, r3, r1
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002638:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800263c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002640:	4692      	mov	sl, r2
 8002642:	469b      	mov	fp, r3
 8002644:	4643      	mov	r3, r8
 8002646:	eb1a 0303 	adds.w	r3, sl, r3
 800264a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800264e:	464b      	mov	r3, r9
 8002650:	eb4b 0303 	adc.w	r3, fp, r3
 8002654:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002664:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002668:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800266c:	460b      	mov	r3, r1
 800266e:	18db      	adds	r3, r3, r3
 8002670:	643b      	str	r3, [r7, #64]	@ 0x40
 8002672:	4613      	mov	r3, r2
 8002674:	eb42 0303 	adc.w	r3, r2, r3
 8002678:	647b      	str	r3, [r7, #68]	@ 0x44
 800267a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800267e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002682:	f7fd fda7 	bl	80001d4 <__aeabi_uldivmod>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4611      	mov	r1, r2
 800268c:	4b3b      	ldr	r3, [pc, #236]	@ (800277c <UART_SetConfig+0x2d4>)
 800268e:	fba3 2301 	umull	r2, r3, r3, r1
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	2264      	movs	r2, #100	@ 0x64
 8002696:	fb02 f303 	mul.w	r3, r2, r3
 800269a:	1acb      	subs	r3, r1, r3
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80026a2:	4b36      	ldr	r3, [pc, #216]	@ (800277c <UART_SetConfig+0x2d4>)
 80026a4:	fba3 2302 	umull	r2, r3, r3, r2
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80026b0:	441c      	add	r4, r3
 80026b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026b6:	2200      	movs	r2, #0
 80026b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80026c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80026c4:	4642      	mov	r2, r8
 80026c6:	464b      	mov	r3, r9
 80026c8:	1891      	adds	r1, r2, r2
 80026ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026cc:	415b      	adcs	r3, r3
 80026ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026d4:	4641      	mov	r1, r8
 80026d6:	1851      	adds	r1, r2, r1
 80026d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80026da:	4649      	mov	r1, r9
 80026dc:	414b      	adcs	r3, r1
 80026de:	637b      	str	r3, [r7, #52]	@ 0x34
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80026ec:	4659      	mov	r1, fp
 80026ee:	00cb      	lsls	r3, r1, #3
 80026f0:	4651      	mov	r1, sl
 80026f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026f6:	4651      	mov	r1, sl
 80026f8:	00ca      	lsls	r2, r1, #3
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	4603      	mov	r3, r0
 8002700:	4642      	mov	r2, r8
 8002702:	189b      	adds	r3, r3, r2
 8002704:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002708:	464b      	mov	r3, r9
 800270a:	460a      	mov	r2, r1
 800270c:	eb42 0303 	adc.w	r3, r2, r3
 8002710:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002720:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002724:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002728:	460b      	mov	r3, r1
 800272a:	18db      	adds	r3, r3, r3
 800272c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800272e:	4613      	mov	r3, r2
 8002730:	eb42 0303 	adc.w	r3, r2, r3
 8002734:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002736:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800273a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800273e:	f7fd fd49 	bl	80001d4 <__aeabi_uldivmod>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4b0d      	ldr	r3, [pc, #52]	@ (800277c <UART_SetConfig+0x2d4>)
 8002748:	fba3 1302 	umull	r1, r3, r3, r2
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	2164      	movs	r1, #100	@ 0x64
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	3332      	adds	r3, #50	@ 0x32
 800275a:	4a08      	ldr	r2, [pc, #32]	@ (800277c <UART_SetConfig+0x2d4>)
 800275c:	fba2 2303 	umull	r2, r3, r2, r3
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	f003 0207 	and.w	r2, r3, #7
 8002766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4422      	add	r2, r4
 800276e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002770:	e106      	b.n	8002980 <UART_SetConfig+0x4d8>
 8002772:	bf00      	nop
 8002774:	40011000 	.word	0x40011000
 8002778:	40011400 	.word	0x40011400
 800277c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002784:	2200      	movs	r2, #0
 8002786:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800278a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800278e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002792:	4642      	mov	r2, r8
 8002794:	464b      	mov	r3, r9
 8002796:	1891      	adds	r1, r2, r2
 8002798:	6239      	str	r1, [r7, #32]
 800279a:	415b      	adcs	r3, r3
 800279c:	627b      	str	r3, [r7, #36]	@ 0x24
 800279e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027a2:	4641      	mov	r1, r8
 80027a4:	1854      	adds	r4, r2, r1
 80027a6:	4649      	mov	r1, r9
 80027a8:	eb43 0501 	adc.w	r5, r3, r1
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	00eb      	lsls	r3, r5, #3
 80027b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ba:	00e2      	lsls	r2, r4, #3
 80027bc:	4614      	mov	r4, r2
 80027be:	461d      	mov	r5, r3
 80027c0:	4643      	mov	r3, r8
 80027c2:	18e3      	adds	r3, r4, r3
 80027c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80027c8:	464b      	mov	r3, r9
 80027ca:	eb45 0303 	adc.w	r3, r5, r3
 80027ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80027d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80027de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80027ee:	4629      	mov	r1, r5
 80027f0:	008b      	lsls	r3, r1, #2
 80027f2:	4621      	mov	r1, r4
 80027f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027f8:	4621      	mov	r1, r4
 80027fa:	008a      	lsls	r2, r1, #2
 80027fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002800:	f7fd fce8 	bl	80001d4 <__aeabi_uldivmod>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4b60      	ldr	r3, [pc, #384]	@ (800298c <UART_SetConfig+0x4e4>)
 800280a:	fba3 2302 	umull	r2, r3, r3, r2
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	011c      	lsls	r4, r3, #4
 8002812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002816:	2200      	movs	r2, #0
 8002818:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800281c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002820:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002824:	4642      	mov	r2, r8
 8002826:	464b      	mov	r3, r9
 8002828:	1891      	adds	r1, r2, r2
 800282a:	61b9      	str	r1, [r7, #24]
 800282c:	415b      	adcs	r3, r3
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002834:	4641      	mov	r1, r8
 8002836:	1851      	adds	r1, r2, r1
 8002838:	6139      	str	r1, [r7, #16]
 800283a:	4649      	mov	r1, r9
 800283c:	414b      	adcs	r3, r1
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800284c:	4659      	mov	r1, fp
 800284e:	00cb      	lsls	r3, r1, #3
 8002850:	4651      	mov	r1, sl
 8002852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002856:	4651      	mov	r1, sl
 8002858:	00ca      	lsls	r2, r1, #3
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	4603      	mov	r3, r0
 8002860:	4642      	mov	r2, r8
 8002862:	189b      	adds	r3, r3, r2
 8002864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002868:	464b      	mov	r3, r9
 800286a:	460a      	mov	r2, r1
 800286c:	eb42 0303 	adc.w	r3, r2, r3
 8002870:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800287e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800288c:	4649      	mov	r1, r9
 800288e:	008b      	lsls	r3, r1, #2
 8002890:	4641      	mov	r1, r8
 8002892:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002896:	4641      	mov	r1, r8
 8002898:	008a      	lsls	r2, r1, #2
 800289a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800289e:	f7fd fc99 	bl	80001d4 <__aeabi_uldivmod>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4611      	mov	r1, r2
 80028a8:	4b38      	ldr	r3, [pc, #224]	@ (800298c <UART_SetConfig+0x4e4>)
 80028aa:	fba3 2301 	umull	r2, r3, r3, r1
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	2264      	movs	r2, #100	@ 0x64
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	1acb      	subs	r3, r1, r3
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	3332      	adds	r3, #50	@ 0x32
 80028bc:	4a33      	ldr	r2, [pc, #204]	@ (800298c <UART_SetConfig+0x4e4>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028c8:	441c      	add	r4, r3
 80028ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028ce:	2200      	movs	r2, #0
 80028d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80028d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80028d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80028d8:	4642      	mov	r2, r8
 80028da:	464b      	mov	r3, r9
 80028dc:	1891      	adds	r1, r2, r2
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	415b      	adcs	r3, r3
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028e8:	4641      	mov	r1, r8
 80028ea:	1851      	adds	r1, r2, r1
 80028ec:	6039      	str	r1, [r7, #0]
 80028ee:	4649      	mov	r1, r9
 80028f0:	414b      	adcs	r3, r1
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002900:	4659      	mov	r1, fp
 8002902:	00cb      	lsls	r3, r1, #3
 8002904:	4651      	mov	r1, sl
 8002906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800290a:	4651      	mov	r1, sl
 800290c:	00ca      	lsls	r2, r1, #3
 800290e:	4610      	mov	r0, r2
 8002910:	4619      	mov	r1, r3
 8002912:	4603      	mov	r3, r0
 8002914:	4642      	mov	r2, r8
 8002916:	189b      	adds	r3, r3, r2
 8002918:	66bb      	str	r3, [r7, #104]	@ 0x68
 800291a:	464b      	mov	r3, r9
 800291c:	460a      	mov	r2, r1
 800291e:	eb42 0303 	adc.w	r3, r2, r3
 8002922:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	663b      	str	r3, [r7, #96]	@ 0x60
 800292e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800293c:	4649      	mov	r1, r9
 800293e:	008b      	lsls	r3, r1, #2
 8002940:	4641      	mov	r1, r8
 8002942:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002946:	4641      	mov	r1, r8
 8002948:	008a      	lsls	r2, r1, #2
 800294a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800294e:	f7fd fc41 	bl	80001d4 <__aeabi_uldivmod>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4b0d      	ldr	r3, [pc, #52]	@ (800298c <UART_SetConfig+0x4e4>)
 8002958:	fba3 1302 	umull	r1, r3, r3, r2
 800295c:	095b      	lsrs	r3, r3, #5
 800295e:	2164      	movs	r1, #100	@ 0x64
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	3332      	adds	r3, #50	@ 0x32
 800296a:	4a08      	ldr	r2, [pc, #32]	@ (800298c <UART_SetConfig+0x4e4>)
 800296c:	fba2 2303 	umull	r2, r3, r2, r3
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	f003 020f 	and.w	r2, r3, #15
 8002976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4422      	add	r2, r4
 800297e:	609a      	str	r2, [r3, #8]
}
 8002980:	bf00      	nop
 8002982:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002986:	46bd      	mov	sp, r7
 8002988:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800298c:	51eb851f 	.word	0x51eb851f

08002990 <memset>:
 8002990:	4402      	add	r2, r0
 8002992:	4603      	mov	r3, r0
 8002994:	4293      	cmp	r3, r2
 8002996:	d100      	bne.n	800299a <memset+0xa>
 8002998:	4770      	bx	lr
 800299a:	f803 1b01 	strb.w	r1, [r3], #1
 800299e:	e7f9      	b.n	8002994 <memset+0x4>

080029a0 <__libc_init_array>:
 80029a0:	b570      	push	{r4, r5, r6, lr}
 80029a2:	4d0d      	ldr	r5, [pc, #52]	@ (80029d8 <__libc_init_array+0x38>)
 80029a4:	4c0d      	ldr	r4, [pc, #52]	@ (80029dc <__libc_init_array+0x3c>)
 80029a6:	1b64      	subs	r4, r4, r5
 80029a8:	10a4      	asrs	r4, r4, #2
 80029aa:	2600      	movs	r6, #0
 80029ac:	42a6      	cmp	r6, r4
 80029ae:	d109      	bne.n	80029c4 <__libc_init_array+0x24>
 80029b0:	4d0b      	ldr	r5, [pc, #44]	@ (80029e0 <__libc_init_array+0x40>)
 80029b2:	4c0c      	ldr	r4, [pc, #48]	@ (80029e4 <__libc_init_array+0x44>)
 80029b4:	f000 f818 	bl	80029e8 <_init>
 80029b8:	1b64      	subs	r4, r4, r5
 80029ba:	10a4      	asrs	r4, r4, #2
 80029bc:	2600      	movs	r6, #0
 80029be:	42a6      	cmp	r6, r4
 80029c0:	d105      	bne.n	80029ce <__libc_init_array+0x2e>
 80029c2:	bd70      	pop	{r4, r5, r6, pc}
 80029c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c8:	4798      	blx	r3
 80029ca:	3601      	adds	r6, #1
 80029cc:	e7ee      	b.n	80029ac <__libc_init_array+0xc>
 80029ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d2:	4798      	blx	r3
 80029d4:	3601      	adds	r6, #1
 80029d6:	e7f2      	b.n	80029be <__libc_init_array+0x1e>
 80029d8:	08002a20 	.word	0x08002a20
 80029dc:	08002a20 	.word	0x08002a20
 80029e0:	08002a20 	.word	0x08002a20
 80029e4:	08002a24 	.word	0x08002a24

080029e8 <_init>:
 80029e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ea:	bf00      	nop
 80029ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ee:	bc08      	pop	{r3}
 80029f0:	469e      	mov	lr, r3
 80029f2:	4770      	bx	lr

080029f4 <_fini>:
 80029f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f6:	bf00      	nop
 80029f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fa:	bc08      	pop	{r3}
 80029fc:	469e      	mov	lr, r3
 80029fe:	4770      	bx	lr
